ARITHMETIC OPERATORS:

    + : Add
    - : Subtract
    / : Divide
    * : Multiply
    % : Modulus

TOKEN DEFINITIONS:
    LETTER      =   a | ... | z | A | ... | Z

    DIGIT       =   0 | ..... | 9

    LETDIG      =   digit | letter

    CHARCONST   =   is a representation for a single character by placing that character in
                    single quotes. A backslash is an escape character. Any character preceded by a backslash
                    is interpreted as that character. For example \x is the letter x, \’ is a single quote, \\ is a
                    single backslash. There are only two exceptions to this rule: \n is a newline character and
                    \0 is the null character.

    STRINGCONST =   any series of zero or more characters enclosed by double quotes. A
                    backslash is an escape character. Any character preceded by a backslash is interpreted as that
                    character without meaning to the string syntax. For example \x is the letter x, \" is a double
                    quote, \’ is a single quote, \\ is a single backslash. There are only two exceptions to this
                    rule: \n is a newline character and \0 is the null character. The string constant can be an
                    empty string: a string of length 0. All string constants are terminated by the first unescaped
                    double quote. String constants must be entirely contained on a single line, that is, they
                    contain no unescaped newlines!

    WHITE SPACE =   (a sequence of blanks and tabs) is ignored. Whitespace may be required to
                    separate some tokens in order to get the scanner not to collapse them into one token. For
                    example: “intx” is a single ID while “int x” is the type int followed by the ID x. The scanner,
                    by its nature, is a greedy matcher.

    COMMENTS are ignored by the scanner. Comments begin with // and run to the end of the
    line.

    All keywords are in lowercase. 

GRAMMAR
    {Stmt}          ->      {Id} = {Expr} ;
    {Stmt}          ->      { {StmtList} } ;
    {Stmt}          ->      if ( (Expr) ) (Stmt) ;

    {StmtList}      ->      {Stmt}
    {StmtList}      ->      {StmtList} {Stmt}

    {Expr}          ->      {Id}
    {Expr}          ->      {Num}
    {Expr}          ->      {Expr} {Optr} {Expr}

    {Id}            ->      x
    {Id}            ->      y

    {Num}           ->      0














